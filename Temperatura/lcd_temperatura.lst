CCS PCM C Compiler, Version 4.074, 38112               10-abr-18 10:16

               Filename: lcd_temperatura.lst

               ROM used: 1908 words (23%)
                         Largest free fragment is 2048
               RAM used: 32 (9%) at main() level
                         57 (15%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   612
0003:  NOP
.................... #include <16f877a.h>								// Inclui biblioteca do microcontrolador 16F877A 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC = 10//									// Inicia ADC com 2^10 = 1024-1 10 bits 
.................... #fuses xt,nowdt,noprotect,put,brownout				// Configuração dos fusíveis 
.................... #fuses nolvp,nocpd,nowrt 							// Configuração dos fusíveis 
.................... #use delay(clock=4000000)							// Usa crystal de 4MHz 
*
00A6:  MOVLW  47
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  MOVF   00,W
00AA:  BTFSC  03.2
00AB:  GOTO   0BA
00AC:  MOVLW  01
00AD:  MOVWF  78
00AE:  CLRF   77
00AF:  DECFSZ 77,F
00B0:  GOTO   0AF
00B1:  DECFSZ 78,F
00B2:  GOTO   0AE
00B3:  MOVLW  4A
00B4:  MOVWF  77
00B5:  DECFSZ 77,F
00B6:  GOTO   0B5
00B7:  GOTO   0B8
00B8:  DECFSZ 00,F
00B9:  GOTO   0AC
00BA:  RETLW  00
.................... #include <lcd2.c>									// Inclui a biblioteca do LCD  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD2_C__ 
.................... #define __LCD2_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00D3:  MOVLW  0F
00D4:  BSF    03.5
00D5:  ANDWF  08,W
00D6:  IORLW  F0
00D7:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00D8:  BCF    03.5
00D9:  BSF    08.2
....................    delay_cycles(1); 
00DA:  NOP
....................    lcd_output_enable(1); 
00DB:  BSF    08.0
....................    delay_cycles(1); 
00DC:  NOP
....................    high = lcd_read_nibble(); 
00DD:  CALL   0C7
00DE:  MOVF   78,W
00DF:  MOVWF  4E
....................        
....................    lcd_output_enable(0); 
00E0:  BCF    08.0
....................    delay_cycles(1); 
00E1:  NOP
....................    lcd_output_enable(1); 
00E2:  BSF    08.0
....................    delay_us(1); 
00E3:  NOP
....................    low = lcd_read_nibble(); 
00E4:  CALL   0C7
00E5:  MOVF   78,W
00E6:  MOVWF  4D
....................        
....................    lcd_output_enable(0); 
00E7:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00E8:  MOVLW  0F
00E9:  BSF    03.5
00EA:  ANDWF  08,W
00EB:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00EC:  BCF    03.5
00ED:  SWAPF  4E,W
00EE:  MOVWF  77
00EF:  MOVLW  F0
00F0:  ANDWF  77,F
00F1:  MOVF   77,W
00F2:  IORWF  4D,W
00F3:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00C7:  MOVF   08,W
00C8:  MOVWF  77
00C9:  SWAPF  08,W
00CA:  ANDLW  0F
00CB:  MOVWF  78
....................   #endif 
.................... } 
00CC:  RETLW  00
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00BB:  SWAPF  4E,W
00BC:  ANDLW  F0
00BD:  MOVWF  77
00BE:  MOVLW  0F
00BF:  ANDWF  08,W
00C0:  IORWF  77,W
00C1:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
00C2:  NOP
....................    lcd_output_enable(1); 
00C3:  BSF    08.0
....................    delay_us(2); 
00C4:  GOTO   0C5
....................    lcd_output_enable(0); 
00C5:  BCF    08.0
.................... } 
00C6:  RETLW  00
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00CD:  BSF    03.5
00CE:  BCF    08.0
....................    lcd_rs_tris(); 
00CF:  BCF    08.1
....................    lcd_rw_tris(); 
00D0:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00D1:  BCF    03.5
00D2:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F4:  MOVF   78,W
00F5:  MOVWF  4D
00F6:  BTFSC  4D.7
00F7:  GOTO   0D3
....................    lcd_output_rs(address); 
00F8:  BTFSS  4B.0
00F9:  BCF    08.1
00FA:  BTFSC  4B.0
00FB:  BSF    08.1
....................    delay_cycles(1); 
00FC:  NOP
....................    lcd_output_rw(0); 
00FD:  BCF    08.2
....................    delay_cycles(1); 
00FE:  NOP
....................    lcd_output_enable(0); 
00FF:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0100:  SWAPF  4C,W
0101:  MOVWF  4D
0102:  MOVLW  0F
0103:  ANDWF  4D,F
0104:  MOVF   4D,W
0105:  MOVWF  4E
0106:  CALL   0BB
....................    lcd_send_nibble(n & 0xf); 
0107:  MOVF   4C,W
0108:  ANDLW  0F
0109:  MOVWF  4D
010A:  MOVWF  4E
010B:  CALL   0BB
.................... } 
010C:  RETLW  00
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
010D:  MOVLW  28
010E:  MOVWF  3A
010F:  MOVLW  0C
0110:  MOVWF  3B
0111:  MOVLW  01
0112:  MOVWF  3C
0113:  MOVLW  06
0114:  MOVWF  3D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0115:  BCF    08.0
....................    lcd_output_rs(0); 
0116:  BCF    08.1
....................    lcd_output_rw(0); 
0117:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0118:  MOVLW  0F
0119:  BSF    03.5
011A:  ANDWF  08,W
011B:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
011C:  BCF    08.0
....................    lcd_rs_tris(); 
011D:  BCF    08.1
....................    lcd_rw_tris(); 
011E:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
011F:  MOVLW  0F
0120:  BCF    03.5
0121:  MOVWF  47
0122:  CALL   0A6
....................    for(i=1;i<=3;++i) 
0123:  MOVLW  01
0124:  MOVWF  39
0125:  MOVF   39,W
0126:  SUBLW  03
0127:  BTFSS  03.0
0128:  GOTO   131
....................    { 
....................        lcd_send_nibble(3); 
0129:  MOVLW  03
012A:  MOVWF  4E
012B:  CALL   0BB
....................        delay_ms(5); 
012C:  MOVLW  05
012D:  MOVWF  47
012E:  CALL   0A6
....................    } 
012F:  INCF   39,F
0130:  GOTO   125
....................     
....................    lcd_send_nibble(2); 
0131:  MOVLW  02
0132:  MOVWF  4E
0133:  CALL   0BB
....................    delay_ms(5); 
0134:  MOVLW  05
0135:  MOVWF  47
0136:  CALL   0A6
....................    for(i=0;i<=3;++i) 
0137:  CLRF   39
0138:  MOVF   39,W
0139:  SUBLW  03
013A:  BTFSS  03.0
013B:  GOTO   148
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
013C:  MOVLW  3A
013D:  ADDWF  39,W
013E:  MOVWF  04
013F:  BCF    03.7
0140:  MOVF   00,W
0141:  MOVWF  3E
0142:  CLRF   4B
0143:  MOVF   3E,W
0144:  MOVWF  4C
0145:  CALL   0CD
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0146:  INCF   39,F
0147:  GOTO   138
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0148:  BCF    0A.3
0149:  BCF    0A.4
014A:  GOTO   651 (RETURN)
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
03F6:  DECFSZ 48,W
03F7:  GOTO   3F9
03F8:  GOTO   3FC
....................       address=LCD_LINE_TWO; 
03F9:  MOVLW  40
03FA:  MOVWF  49
....................    else 
03FB:  GOTO   3FD
....................       address=0; 
03FC:  CLRF   49
....................       
....................    address+=x-1; 
03FD:  MOVLW  01
03FE:  SUBWF  47,W
03FF:  ADDWF  49,F
....................    lcd_send_byte(0,0x80|address); 
0400:  MOVF   49,W
0401:  IORLW  80
0402:  MOVWF  4A
0403:  CLRF   4B
0404:  MOVF   4A,W
0405:  MOVWF  4C
0406:  CALL   0CD
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0407:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0408:  MOVF   46,W
0409:  XORLW  07
040A:  BTFSC  03.2
040B:  GOTO   416
040C:  XORLW  0B
040D:  BTFSC  03.2
040E:  GOTO   41B
040F:  XORLW  06
0410:  BTFSC  03.2
0411:  GOTO   423
0412:  XORLW  02
0413:  BTFSC  03.2
0414:  GOTO   429
0415:  GOTO   42E
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0416:  MOVLW  01
0417:  MOVWF  47
0418:  MOVWF  48
0419:  CALL   3F6
041A:  GOTO   434
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
041B:  CLRF   4B
041C:  MOVLW  01
041D:  MOVWF  4C
041E:  CALL   0CD
....................                      delay_ms(2); 
041F:  MOVLW  02
0420:  MOVWF  47
0421:  CALL   0A6
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0422:  GOTO   434
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0423:  MOVLW  01
0424:  MOVWF  47
0425:  MOVLW  02
0426:  MOVWF  48
0427:  CALL   3F6
0428:  GOTO   434
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0429:  CLRF   4B
042A:  MOVLW  10
042B:  MOVWF  4C
042C:  CALL   0CD
042D:  GOTO   434
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
042E:  MOVLW  01
042F:  MOVWF  4B
0430:  MOVF   46,W
0431:  MOVWF  4C
0432:  CALL   0CD
0433:  GOTO   434
....................      #endif 
....................    } 
.................... } 
0434:  RETLW  00
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
*
014B:  RLF    39,F
014C:  RLF    39,F
014D:  RLF    39,F
014E:  MOVLW  F8
014F:  ANDWF  39,F
....................    which &= 0x38; 
0150:  MOVLW  38
0151:  ANDWF  39,F
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
0152:  MOVF   39,W
0153:  IORLW  40
0154:  MOVWF  3D
0155:  CLRF   4B
0156:  MOVF   3D,W
0157:  MOVWF  4C
0158:  CALL   0CD
....................  
....................    for(i=0; i<8; i++) 
0159:  CLRF   3C
015A:  MOVF   3C,W
015B:  SUBLW  07
015C:  BTFSS  03.0
015D:  GOTO   171
....................    { 
....................       lcd_send_byte(1, *ptr++); 
015E:  MOVF   3B,W
015F:  MOVWF  7A
0160:  MOVF   3A,W
0161:  INCF   3A,F
0162:  BTFSC  03.2
0163:  INCF   3B,F
0164:  MOVWF  04
0165:  BCF    03.7
0166:  BTFSC  7A.0
0167:  BSF    03.7
0168:  MOVF   00,W
0169:  MOVWF  3D
016A:  MOVLW  01
016B:  MOVWF  4B
016C:  MOVF   3D,W
016D:  MOVWF  4C
016E:  CALL   0CD
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
016F:  INCF   3C,F
0170:  GOTO   15A
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
0171:  BCF    0A.3
0172:  BCF    0A.4
0173:  GOTO   656 (RETURN)
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #byte porta = 0x05									// Diz que o port_a ficara no espaço 0x05 da memoria 
.................... #byte portb = 0x06									// Diz que o port_b ficara no espaço 0x06 da memoria 
.................... #byte portc = 0x07									// Diz que o port_c ficara no espaço 0x07 da memoria 
.................... #byte portd = 0x08									// Diz que o port_d ficara no espaço 0x08 da memoria 
.................... #byte porte = 0x09									// Diz que o port_e ficara no espaço 0x09 da memoria 
.................... int graus[8]={ 
.................... 0b00000, 
.................... 0b11100, 
.................... 0b10100, 
.................... 0b11100, 
.................... 0b00000, 
.................... 0b00000, 
.................... 0b00000, 
.................... 0b00000 
.................... }; 
*
061D:  BCF    03.5
061E:  CLRF   20
061F:  MOVLW  1C
0620:  MOVWF  21
0621:  MOVLW  14
0622:  MOVWF  22
0623:  MOVLW  1C
0624:  MOVWF  23
0625:  CLRF   24
0626:  CLRF   25
0627:  CLRF   26
0628:  CLRF   27
.................... float a,l,inf,sup;									// Declaração das variaveis globais do tipo ponto flutuante 
.................... void conta (void);									// Indica que irá ter uma função com retorno 0 com o nome conta 
.................... void main() 
.................... { 
*
0612:  CLRF   04
0613:  BCF    03.7
0614:  MOVLW  1F
0615:  ANDWF  03,F
0616:  BSF    03.5
0617:  BSF    1F.0
0618:  BSF    1F.1
0619:  BSF    1F.2
061A:  BCF    1F.3
061B:  MOVLW  07
061C:  MOVWF  1C
.................... 	setup_adc_ports(AN0);							// Diz que irá utiliar o pino AN0 como ADC (pin_a0) 
*
062B:  BSF    03.5
062C:  BCF    1F.0
062D:  BSF    1F.1
062E:  BSF    1F.2
062F:  BSF    1F.3
.................... 	setup_adc (ADC_CLOCK_INTERNAL);					// Informa que irá utilizar clock interno para o adc 
0630:  BCF    1F.6
0631:  BCF    03.5
0632:  BSF    1F.6
0633:  BSF    1F.7
0634:  BSF    03.5
0635:  BSF    1F.7
0636:  BCF    03.5
0637:  BSF    1F.0
.................... 	set_adc_channel(0);								// Inicia o Ad no canal 0 
0638:  MOVLW  00
0639:  MOVWF  78
063A:  MOVF   1F,W
063B:  ANDLW  C7
063C:  IORWF  78,W
063D:  MOVWF  1F
.................... 	set_tris_a(0xff);								// Configura todos os pinos do port_a como entrada 
063E:  MOVLW  FF
063F:  BSF    03.5
0640:  MOVWF  05
.................... 	set_tris_b(0xfc);								// Configura todos os pinos do port_b como saída 
0641:  MOVLW  FC
0642:  MOVWF  06
.................... 	set_tris_c(0xff);								// Configura todos os pinos do port_c como entrada 
0643:  MOVLW  FF
0644:  MOVWF  07
0645:  BCF    03.5
0646:  MOVWF  38
.................... 	set_tris_d(0x08);								// Configura todos os pinos do port_d como saída 
0647:  MOVLW  08
0648:  BSF    03.5
0649:  MOVWF  08
.................... 	set_tris_e(0xff);								// Configura todos os pinos do port_e como entrada 
064A:  BSF    09.0
064B:  BSF    09.1
064C:  BSF    09.2
.................... 	output_b(0x00);									// Zera saídas do port b 
064D:  CLRF   06
064E:  BCF    03.5
064F:  CLRF   06
.................... 	lcd_init();										// Inicia LCD 
0650:  GOTO   10D
.................... 	lcd_set_cgram_char(0,graus);					// Armazena a variavel graus no espaço 0 da memoria do LCD 
0651:  CLRF   39
0652:  CLRF   3B
0653:  MOVLW  20
0654:  MOVWF  3A
0655:  GOTO   14B
.................... 	while (true) 
.................... 	{	 
.................... 		conta();									// Vai para função conta 
0656:  CALL   2D2
.................... 		printf(lcd_putc,"\fControle temperatura");	// /f limpa tela e a seguir mostra o texto que está a frente  
0657:  CLRF   39
0658:  MOVF   39,W
0659:  CALL   004
065A:  INCF   39,F
065B:  MOVWF  77
065C:  MOVWF  46
065D:  CALL   408
065E:  MOVLW  15
065F:  SUBWF  39,W
0660:  BTFSS  03.2
0661:  GOTO   658
.................... 		lcd_gotoxy(1,2);						  	// vai para linha 2, no espaço 1 
0662:  MOVLW  01
0663:  MOVWF  47
0664:  MOVLW  02
0665:  MOVWF  48
0666:  CALL   3F6
.................... 		printf(lcd_putc,"%1.2f%cC",a,0);	  		// /r da um tab, %1.2f mostra valor com duas casas depois da virgula 
0667:  MOVLW  89
0668:  MOVWF  04
0669:  MOVF   2B,W
066A:  MOVWF  3C
066B:  MOVF   2A,W
066C:  MOVWF  3B
066D:  MOVF   29,W
066E:  MOVWF  3A
066F:  MOVF   28,W
0670:  MOVWF  39
0671:  MOVLW  02
0672:  MOVWF  3D
0673:  GOTO   477
0674:  CLRF   46
0675:  CALL   408
0676:  MOVLW  43
0677:  MOVWF  46
0678:  CALL   408
.................... 		if(a>169.99)								// Se o valor da temperatura for maior que 190°C 
0679:  MOVLW  71
067A:  MOVWF  3C
067B:  MOVLW  FD
067C:  MOVWF  3B
067D:  MOVLW  29
067E:  MOVWF  3A
067F:  MOVLW  86
0680:  MOVWF  39
0681:  MOVF   2B,W
0682:  MOVWF  40
0683:  MOVF   2A,W
0684:  MOVWF  3F
0685:  MOVF   29,W
0686:  MOVWF  3E
0687:  MOVF   28,W
0688:  MOVWF  3D
0689:  CALL   5D3
068A:  BTFSS  03.0
068B:  GOTO   6D7
.................... 		{ 
.................... 			lcd_gotoxy(1,1);						// vai para linha 1, no espaço 1 
068C:  MOVLW  01
068D:  MOVWF  47
068E:  MOVWF  48
068F:  CALL   3F6
.................... 			printf(lcd_putc,"\fTemperatura elevada"); 
0690:  CLRF   39
0691:  MOVF   39,W
0692:  CALL   01E
0693:  INCF   39,F
0694:  MOVWF  77
0695:  MOVWF  46
0696:  CALL   408
0697:  MOVLW  14
0698:  SUBWF  39,W
0699:  BTFSS  03.2
069A:  GOTO   691
.................... 			lcd_gotoxy(1,2);						// vai para linha 2, no espaço 1 
069B:  MOVLW  01
069C:  MOVWF  47
069D:  MOVLW  02
069E:  MOVWF  48
069F:  CALL   3F6
.................... 			printf(lcd_putc,"Resfriando sistema"); 
06A0:  CLRF   39
06A1:  MOVF   39,W
06A2:  CALL   037
06A3:  INCF   39,F
06A4:  MOVWF  77
06A5:  MOVWF  46
06A6:  CALL   408
06A7:  MOVLW  12
06A8:  SUBWF  39,W
06A9:  BTFSS  03.2
06AA:  GOTO   6A1
.................... 			lcd_gotoxy(21,1);						// vai para linha 3, no espaço 1 
06AB:  MOVLW  15
06AC:  MOVWF  47
06AD:  MOVLW  01
06AE:  MOVWF  48
06AF:  CALL   3F6
.................... 			printf(lcd_putc,"Aguarde um momento"); 
06B0:  CLRF   39
06B1:  MOVF   39,W
06B2:  CALL   04E
06B3:  INCF   39,F
06B4:  MOVWF  77
06B5:  MOVWF  46
06B6:  CALL   408
06B7:  MOVLW  12
06B8:  SUBWF  39,W
06B9:  BTFSS  03.2
06BA:  GOTO   6B1
.................... 			output_b(0x00);							// Zera o port b  
06BB:  BSF    03.5
06BC:  CLRF   06
06BD:  BCF    03.5
06BE:  CLRF   06
.................... 			output_high(pin_b1);					// Liga o pino b1 
06BF:  BSF    03.5
06C0:  BCF    06.1
06C1:  BCF    03.5
06C2:  BSF    06.1
.................... 			while(a>120) 
.................... 			{ 
06C3:  CLRF   3C
06C4:  CLRF   3B
06C5:  MOVLW  70
06C6:  MOVWF  3A
06C7:  MOVLW  85
06C8:  MOVWF  39
06C9:  MOVF   2B,W
06CA:  MOVWF  40
06CB:  MOVF   2A,W
06CC:  MOVWF  3F
06CD:  MOVF   29,W
06CE:  MOVWF  3E
06CF:  MOVF   28,W
06D0:  MOVWF  3D
06D1:  CALL   5D3
06D2:  BTFSS  03.0
06D3:  GOTO   6D6
.................... 				conta();							// Vai para a função Conta 
06D4:  CALL   2D2
.................... 			} 
06D5:  GOTO   6C3
.................... 		} 
.................... 		else if(a>99.99)							// Senão se o valor da temperatura for maior que 100°C 
06D6:  GOTO   737
06D7:  MOVLW  E1
06D8:  MOVWF  3C
06D9:  MOVLW  FA
06DA:  MOVWF  3B
06DB:  MOVLW  47
06DC:  MOVWF  3A
06DD:  MOVLW  85
06DE:  MOVWF  39
06DF:  MOVF   2B,W
06E0:  MOVWF  40
06E1:  MOVF   2A,W
06E2:  MOVWF  3F
06E3:  MOVF   29,W
06E4:  MOVWF  3E
06E5:  MOVF   28,W
06E6:  MOVWF  3D
06E7:  CALL   5D3
06E8:  BTFSS  03.0
06E9:  GOTO   713
.................... 		{ 
.................... 			lcd_gotoxy(21,1);						// vai para linha 3, no espaço 1 
06EA:  MOVLW  15
06EB:  MOVWF  47
06EC:  MOVLW  01
06ED:  MOVWF  48
06EE:  CALL   3F6
.................... 			printf(lcd_putc,"Temperatura ideal"); 
06EF:  CLRF   39
06F0:  MOVF   39,W
06F1:  CALL   065
06F2:  INCF   39,F
06F3:  MOVWF  77
06F4:  MOVWF  46
06F5:  CALL   408
06F6:  MOVLW  11
06F7:  SUBWF  39,W
06F8:  BTFSS  03.2
06F9:  GOTO   6F0
.................... 			lcd_gotoxy(21,2);						// vai para linha 4, no espaço 1 
06FA:  MOVLW  15
06FB:  MOVWF  47
06FC:  MOVLW  02
06FD:  MOVWF  48
06FE:  CALL   3F6
.................... 			printf(lcd_putc,"Esteira ligada"); 
06FF:  CLRF   39
0700:  MOVF   39,W
0701:  CALL   07B
0702:  INCF   39,F
0703:  MOVWF  77
0704:  MOVWF  46
0705:  CALL   408
0706:  MOVLW  0E
0707:  SUBWF  39,W
0708:  BTFSS  03.2
0709:  GOTO   700
.................... 			output_b(0x00);							// Zera o portb 
070A:  BSF    03.5
070B:  CLRF   06
070C:  BCF    03.5
070D:  CLRF   06
.................... 			output_high(pin_b0);					// Liga o pino b0 
070E:  BSF    03.5
070F:  BCF    06.0
0710:  BCF    03.5
0711:  BSF    06.0
.................... 		} 
.................... 		else										// Senão  
0712:  GOTO   737
.................... 		{ 
.................... 			lcd_gotoxy(21,1);						// Vai para linha 2, no espaço 1 
0713:  MOVLW  15
0714:  MOVWF  47
0715:  MOVLW  01
0716:  MOVWF  48
0717:  CALL   3F6
.................... 			printf(lcd_putc,"Aquecendo o sistema"); 
0718:  CLRF   39
0719:  MOVF   39,W
071A:  CALL   08E
071B:  INCF   39,F
071C:  MOVWF  77
071D:  MOVWF  46
071E:  CALL   408
071F:  MOVLW  13
0720:  SUBWF  39,W
0721:  BTFSS  03.2
0722:  GOTO   719
.................... 			lcd_gotoxy(21,2);						// Vai para linha 2, no espaço 1 
0723:  MOVLW  15
0724:  MOVWF  47
0725:  MOVLW  02
0726:  MOVWF  48
0727:  CALL   3F6
.................... 			printf(lcd_putc,"Aguarde um momento"); 
0728:  CLRF   39
0729:  MOVF   39,W
072A:  CALL   04E
072B:  INCF   39,F
072C:  MOVWF  77
072D:  MOVWF  46
072E:  CALL   408
072F:  MOVLW  12
0730:  SUBWF  39,W
0731:  BTFSS  03.2
0732:  GOTO   729
.................... 			output_b(0x00);							// Zera o port b 
0733:  BSF    03.5
0734:  CLRF   06
0735:  BCF    03.5
0736:  CLRF   06
.................... 		} 
.................... 		while(l<sup&&l>inf) 
.................... 		{ 
0737:  MOVF   2F,W
0738:  MOVWF  3C
0739:  MOVF   2E,W
073A:  MOVWF  3B
073B:  MOVF   2D,W
073C:  MOVWF  3A
073D:  MOVF   2C,W
073E:  MOVWF  39
073F:  MOVF   37,W
0740:  MOVWF  40
0741:  MOVF   36,W
0742:  MOVWF  3F
0743:  MOVF   35,W
0744:  MOVWF  3E
0745:  MOVF   34,W
0746:  MOVWF  3D
0747:  CALL   5D3
0748:  BTFSS  03.0
0749:  GOTO   772
074A:  MOVF   33,W
074B:  MOVWF  3C
074C:  MOVF   32,W
074D:  MOVWF  3B
074E:  MOVF   31,W
074F:  MOVWF  3A
0750:  MOVF   30,W
0751:  MOVWF  39
0752:  MOVF   2F,W
0753:  MOVWF  40
0754:  MOVF   2E,W
0755:  MOVWF  3F
0756:  MOVF   2D,W
0757:  MOVWF  3E
0758:  MOVF   2C,W
0759:  MOVWF  3D
075A:  CALL   5D3
075B:  BTFSS  03.0
075C:  GOTO   772
.................... 			l = read_adc();							// Le o valor do AD enquanto for menor que o sup e maior que o inferior 
075D:  BSF    1F.2
075E:  BTFSC  1F.2
075F:  GOTO   75E
0760:  MOVF   1E,W
0761:  MOVWF  7A
0762:  BSF    03.5
0763:  MOVF   1E,W
0764:  BCF    03.5
0765:  MOVWF  39
0766:  MOVF   1E,W
0767:  MOVWF  3A
0768:  CALL   174
0769:  MOVF   7A,W
076A:  MOVWF  2F
076B:  MOVF   79,W
076C:  MOVWF  2E
076D:  MOVF   78,W
076E:  MOVWF  2D
076F:  MOVF   77,W
0770:  MOVWF  2C
.................... 		} 
0771:  GOTO   737
.................... 	} 
0772:  GOTO   656
.................... } 
.................... void conta () 
.................... { 
0773:  SLEEP
.................... 		l = read_adc();								// Le o valor do ADC 
*
02D2:  BSF    1F.2
02D3:  BTFSC  1F.2
02D4:  GOTO   2D3
02D5:  MOVF   1E,W
02D6:  MOVWF  7A
02D7:  BSF    03.5
02D8:  MOVF   1E,W
02D9:  BCF    03.5
02DA:  MOVWF  39
02DB:  MOVF   1E,W
02DC:  MOVWF  3A
02DD:  CALL   174
02DE:  MOVF   7A,W
02DF:  MOVWF  2F
02E0:  MOVF   79,W
02E1:  MOVWF  2E
02E2:  MOVF   78,W
02E3:  MOVWF  2D
02E4:  MOVF   77,W
02E5:  MOVWF  2C
.................... 		a = l / 5;									// Valor de a pode chegar até 204,6°C 
02E6:  MOVF   2F,W
02E7:  MOVWF  3C
02E8:  MOVF   2E,W
02E9:  MOVWF  3B
02EA:  MOVF   2D,W
02EB:  MOVWF  3A
02EC:  MOVF   2C,W
02ED:  MOVWF  39
02EE:  CLRF   40
02EF:  CLRF   3F
02F0:  MOVLW  20
02F1:  MOVWF  3E
02F2:  MOVLW  81
02F3:  MOVWF  3D
*
03BD:  MOVF   7A,W
03BE:  MOVWF  2B
03BF:  MOVF   79,W
03C0:  MOVWF  2A
03C1:  MOVF   78,W
03C2:  MOVWF  29
03C3:  MOVF   77,W
03C4:  MOVWF  28
.................... 		inf = l - 10;								// Valor do AD - 10, para ser valor inferior 
03C5:  BSF    03.1
03C6:  MOVF   2F,W
03C7:  MOVWF  3C
03C8:  MOVF   2E,W
03C9:  MOVWF  3B
03CA:  MOVF   2D,W
03CB:  MOVWF  3A
03CC:  MOVF   2C,W
03CD:  MOVWF  39
03CE:  CLRF   40
03CF:  CLRF   3F
03D0:  MOVLW  20
03D1:  MOVWF  3E
03D2:  MOVLW  82
03D3:  MOVWF  3D
03D4:  CALL   191
03D5:  MOVF   7A,W
03D6:  MOVWF  33
03D7:  MOVF   79,W
03D8:  MOVWF  32
03D9:  MOVF   78,W
03DA:  MOVWF  31
03DB:  MOVF   77,W
03DC:  MOVWF  30
.................... 		sup = l + 10;								// Valor do AD + 10, para ser valor superior 
03DD:  BCF    03.1
03DE:  MOVF   2F,W
03DF:  MOVWF  3C
03E0:  MOVF   2E,W
03E1:  MOVWF  3B
03E2:  MOVF   2D,W
03E3:  MOVWF  3A
03E4:  MOVF   2C,W
03E5:  MOVWF  39
03E6:  CLRF   40
03E7:  CLRF   3F
03E8:  MOVLW  20
03E9:  MOVWF  3E
03EA:  MOVLW  82
03EB:  MOVWF  3D
03EC:  CALL   191
03ED:  MOVF   7A,W
03EE:  MOVWF  37
03EF:  MOVF   79,W
03F0:  MOVWF  36
03F1:  MOVF   78,W
03F2:  MOVWF  35
03F3:  MOVF   77,W
03F4:  MOVWF  34
.................... } 
03F5:  RETLW  00

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
